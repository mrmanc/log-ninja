#!/usr/bin/awk -f
#
# Assumes awk is GNU awk.
#
# comes from https://github.com/mrmanc/log-ninja
#
# supply max_lines and max as variables like this:
#
#   cat /usr/share/dict/words | awk '{print length($1)}' | \
#       distribution -v max_lines=5 -v max=10 -v min=3
#

BEGIN {
        LIMIT_MAX=max
	LIMIT_MIN=min
        DEFAULT_MAX_LINES=55
	# XXX NUMBER_OF_LINES is not used anywhere
        if (lines) {
                NUMBER_OF_LINES=lines
        } else {
                NUMBER_OF_LINES=55
        }
        if (max_width) {
                LINE_WIDTH=max_width
        } else {
                LINE_WIDTH=100
        }
	if (LIMIT_MAX > 0 && LIMIT_MIN && LIMIT_MIN >= LIMIT_MAX) {
		printf("min >= max, exiting.\n")
		doexit = 1
		exit
	}
}
{
        if (match($1,/^[0-9\.]+$/)) {
                if ((!LIMIT_MAX > 0 || $1 < LIMIT_MAX) && 
		   (!LIMIT_MIN > 0 || $1 > LIMIT_MIN)) {
                        values[i++] = $1
                }
        }
}
END {
	if (doexit)
		exit 1
	# Traverse the values to find the maximum value.
        number_of_records=0
        for (v_index in values) {
                if (max < values[v_index])
                        max = values[v_index]
                number_of_records++
        }

	# Set minimum value.
        if (LIMIT_MIN <= 0)
		min = 0
	else
		min = LIMIT_MIN

	# Set number of lines of the histogram.
        if (max_lines) {
                if (max <= max_lines) {
                        number_of_lines = max - min
                } else {
                        number_of_lines = max_lines
                }
        } else {
                if (max <= DEFAULT_MAX_LINES) {
                        number_of_lines = max - min
                } else {
                        number_of_lines = DEFAULT_MAX_LINES
                }
        }

        line_height=(max-min)/number_of_lines
        printf("records %d min %d max %d height %d\n",
	    number_of_records, min, max, line_height)
	# Assign the values to buckets/lines.
        for (v_index in values) {
                counted[int((values[v_index]-min)/line_height)]++
        }

        line=0
        max_width=0
	# Determine maximum number of characters to represent a line.
        while (line <= number_of_lines) {
                if (max_width < counted[line])
			max_width = counted[line]
                line++
        }

        line=0
        records_so_far=0
        printf("%8s %8s %8s %s\n","Value","Height","%ile","Histogram")
	# Print the histogram by traversing the buckets/lines.
        while (line <= number_of_lines) {
                records_so_far += counted[line]
                bar_width=counted[line]*LINE_WIDTH/max_width
                bar=""
                while (bar_width-- > 0)
			bar=bar "#"
                printf("%8d %8d %8.4f %s\n", min + line * line_height,
		    counted[line], 100 * (records_so_far / number_of_records),
		    bar)
                line++
        }
}
